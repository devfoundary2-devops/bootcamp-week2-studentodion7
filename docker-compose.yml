services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: shopmicro-postgres
    environment:
      POSTGRES_DB: shopmicro
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shopmicro-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: shopmicro-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shopmicro-network

  # Backend API
  backend:
    build:
      context: ./backend
      target: development
    container_name: shopmicro-backend
    environment:
      - NODE_ENV=development
      - PORT=3001
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/shopmicro
      - REDIS_URL=redis://redis:6379
      - FRONTEND_URL=http://localhost:8080
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://alloy:4318/v1/traces
      - OTEL_SERVICE_NAME=shopmicro-backend
      - LOG_LEVEL=info
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/usr/src/app
      - backend_node_modules:/usr/src/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      alloy:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - shopmicro-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      target: development
    container_name: shopmicro-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - CHOKIDAR_USEPOLLING=true
      - GENERATE_SOURCEMAP=false
    ports:
      - "8080:3000"
    volumes:
      - ./frontend:/usr/src/app
      - frontend_node_modules:/usr/src/app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    stdin_open: true
    tty: true
    networks:
      - shopmicro-network

  # ML Recommendation Service
  ml-service:
    build:
      context: ./ml-service
      target: development
    container_name: shopmicro-ml-service
    environment:
      - FLASK_ENV=development
      - PORT=3002
      - REDIS_URL=redis://redis:6379
      - BACKEND_URL=http://backend:3001
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://alloy:4318/v1/traces
      - OTEL_SERVICE_NAME=shopmicro-ml-service
      - LOG_LEVEL=info
    ports:
      - "3002:3002"
    volumes:
      - ./ml-service:/usr/src/app
    depends_on:
      redis:
        condition: service_healthy
      alloy:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - shopmicro-network

  # Grafana for visualization and dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: shopmicro-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_SERVER_DOMAIN=localhost
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ID=1
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_LOG_LEVEL=info
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
      - ./infrastructure/grafana/grafana.ini:/etc/grafana/grafana.ini
    depends_on:
      - mimir
      - loki
      - tempo
    networks:
      - shopmicro-network

  # Mimir for metrics storage (Prometheus-compatible)
  mimir:
    image: grafana/mimir:latest
    container_name: shopmicro-mimir
    ports:
      - "9009:9009"
    command:
      - -config.file=/etc/mimir/mimir.yaml
      - -target=all,alertmanager
    volumes:
      - "./infrastructure/mimir/mimir-official.yaml:/etc/mimir/mimir.yaml"
      - mimir_data:/data
    networks:
      - shopmicro-network

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: shopmicro-loki
    user: "0:0"  # Run as root to avoid permission issues
    ports:
      - "3100:3100"
    command:
      - -config.file=/etc/loki/loki.yaml
    volumes:
      - "./infrastructure/loki/loki-official.yaml:/etc/loki/loki.yaml"
      - loki_data:/tmp/loki
    networks:
      - shopmicro-network

  # Tempo for distributed tracing
  tempo:
    image: grafana/tempo:latest
    container_name: shopmicro-tempo
    user: "0:0"  # Run as root to avoid permission issues
    ports:
      - "3200:3200"
      - "4317:4317"  # OTLP gRPC receiver
      - "4318:4318"  # OTLP HTTP receiver
    command:
      - -config.file=/etc/tempo/tempo.yaml
    volumes:
      - "./infrastructure/tempo/tempo-official.yaml:/etc/tempo/tempo.yaml"
      - tempo_data:/tmp/tempo
    networks:
      - shopmicro-network

  # Alloy agent for telemetry collection
  alloy:
    image: grafana/alloy:latest
    container_name: shopmicro-alloy
    ports:
      - "12345:12345"  # Alloy UI
    command:
      - run
      - /etc/alloy/config.alloy
      - --server.http.listen-addr=0.0.0.0:12345
      - --stability.level=generally-available
    volumes:
      - "./infrastructure/alloy/config-official.alloy:/etc/alloy/config.alloy"
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - mimir
      - loki
      - tempo
    networks:
      - shopmicro-network

networks:
  shopmicro-network:
    driver: bridge
    name: shopmicro-network

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  mimir_data:
  loki_data:
  tempo_data:
  backend_node_modules:
  frontend_node_modules:
